name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Create Gradle Wrapper Structure
      run: |
        # Create gradle wrapper directory if it doesn't exist
        mkdir -p gradle/wrapper
        
        # Create gradlew script
        cat > gradlew << 'EOF'
        #!/bin/bash
        # Gradle wrapper script
        
        APP_NAME="Gradle"
        APP_BASE_NAME=${0##*/}
        
        # Use the maximum available, or set MAX_FD != -1 to use that value.
        MAX_FD="maximum"
        
        warn () {
            echo "$*"
        }
        
        die () {
            echo
            echo "$*"
            echo
            exit 1
        }
        
        # OS specific support (must be 'true' or 'false').
        cygwin=false
        msys=false
        darwin=false
        nonstop=false
        case "`uname`" in
          CYGWIN* )
            cygwin=true
            ;;
          Darwin* )
            darwin=true
            ;;
          MINGW* )
            msys=true
            ;;
          NONSTOP* )
            nonstop=true
            ;;
        esac
        
        CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
        
        # Determine the Java command to use to start the JVM.
        if [ -n "$JAVA_HOME" ] ; then
            if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                # IBM's JDK on AIX uses strange locations for the executables
                JAVACMD="$JAVA_HOME/jre/sh/java"
            else
                JAVACMD="$JAVA_HOME/bin/java"
            fi
            if [ ! -x "$JAVACMD" ] ; then
                die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
        
        Please set the JAVA_HOME variable in your environment to match the
        location of your Java installation."
            fi
        else
            JAVACMD="java"
            which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
        
        Please set the JAVA_HOME variable in your environment to match the
        location of your Java installation."
        fi
        
        # Escape application args
        save () {
            for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
            echo " "
        }
        APP_ARGS=$(save "$@")
        
        # Collect all arguments for the java command
        eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
        
        exec "$JAVACMD" "$@"
        EOF
        
        # Make gradlew executable
        chmod +x gradlew
        
        # Create gradlew.bat for Windows compatibility
        cat > gradlew.bat << 'EOF'
        @rem Execute Gradle
        @if "%DEBUG%" == "" @echo off
        @rem Set local scope for the variables with windows NT shell
        if "%OS%"=="Windows_NT" setlocal
        
        set DIRNAME=%~dp0
        if "%DIRNAME%" == "" set DIRNAME=.
        set APP_BASE_NAME=%~n0
        set APP_HOME=%DIRNAME%
        
        @rem Resolve any "." and ".." in APP_HOME to make it shorter.
        for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
        
        @rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
        set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
        
        @rem Find java.exe
        if defined JAVA_HOME goto findJavaFromJavaHome
        
        set JAVA_EXE=java.exe
        %JAVA_EXE% -version >NUL 2>&1
        if "%ERRORLEVEL%" == "0" goto execute
        
        echo.
        echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
        echo.
        echo Please set the JAVA_HOME variable in your environment to match the
        echo location of your Java installation.
        
        goto fail
        
        :findJavaFromJavaHome
        set JAVA_HOME=%JAVA_HOME:"=%
        set JAVA_EXE=%JAVA_HOME%/bin/java.exe
        
        if exist "%JAVA_EXE%" goto execute
        
        echo.
        echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
        echo.
        echo Please set the JAVA_HOME variable in your environment to match the
        echo location of your Java installation.
        
        goto fail
        
        :execute
        @rem Setup the command line
        
        set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
        
        
        @rem Execute Gradle
        "%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
        
        :end
        @rem End local scope for the variables with windows NT shell
        if "%ERRORLEVEL%"=="0" goto mainEnd
        
        :fail
        rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
        rem the _wrapper_ exit code.
        if not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
        exit /b 1
        
        :mainEnd
        if "%OS%"=="Windows_NT" endlocal
        
        :omega
        EOF
        
    - name: Download and Setup Gradle Wrapper
      run: |
        # Download gradle wrapper jar
        curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/master/gradle/wrapper/gradle-wrapper.jar
        
        # Create gradle wrapper properties
        cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        
        # Verify files exist
        ls -la gradlew
        ls -la gradle/wrapper/
        
    - name: Test Gradle Wrapper
      run: |
        ./gradlew --version
        
    - name: Clean Project  
      run: ./gradlew clean
      
    - name: Build Debug APK
      run: ./gradlew assembleDebug --stacktrace --info
      
    - name: List Build Output
      run: |
        find . -name "*.apk" -type f
        ls -la app/build/outputs/apk/debug/ || echo "Debug APK directory not found"
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: sponsored-detector-apk
        path: app/build/outputs/apk/debug/*.apk
